    """
    base_cpu = 85.0 + random.uniform(-2, 2)
    base_mem = 70.0 + random.uniform(-2, 2)
    simulated_data = {
        "cpu_percent": {
            "avg": round(base_cpu, 1),
            "min": round(base_cpu - 5, 1),
            "max": round(base_cpu + 5, 1),
            "std": 3.0
        },
        "memory_percent": {
            "avg": round(base_mem, 1),
            "min": round(base_mem - 5, 1),
            "max": round(base_mem + 5, 1),
            "std": 2.5
        },
        "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
    }
    return simulated_data
def simulate_decision_output(aggregated_metrics, cpu_threshold, mem_threshold):
    """
    Applies rule-based decision logic to simulated aggregated metrics.
    
    Parameters:
        aggregated_metrics (dict): Aggregated metrics dictionary.
        cpu_threshold (float): Manual CPU threshold.
        mem_threshold (float): Manual Memory threshold.
    
    Returns:
        dict: Decision output.
    """
    cpu_avg = aggregated_metrics["cpu_percent"]["avg"]
    mem_avg = aggregated_metrics["memory_percent"]["avg"]
    
    decision = {
        "timestamp": aggregated_metrics["timestamp"],
        "cpu_adjustment": "reduce_non_critical" if cpu_avg > cpu_threshold else "normal",
        "memory_adjustment": "flag_high_usage" if mem_avg > mem_threshold else "normal",
        "details": {
            "cpu_avg": cpu_avg,
            "memory_avg": mem_avg
        }
    }
    return decision

